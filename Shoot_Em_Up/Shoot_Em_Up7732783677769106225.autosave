import java.util.*;

boolean clicked,run,answer = false,mu,md,ml,mr,f,s,gr;
int mode,time,t0,prev,etime,phase,partnum,fci,minimode,initialT,waitTime,score,countdown,phasefc;
Player human;
Rect Sidebar;
char Button;
boolean[][] partition;
int[] level1phaseTimes = new int[] {9,6};
Controls Up,Down,Left,Right;
ArrayList<Enemy> enemies = new ArrayList<Enemy>();
ArrayList<Projectile> enemyproj = new ArrayList<Projectile>();
ArrayList<Projectile> playerproj = new ArrayList<Projectile>();
ArrayList<Powerups> extra = new ArrayList<Powerups>();
ArrayList<Controls> Balls = new ArrayList<Controls>();
ArrayList<Question> Qs = new ArrayList<Question>();
String[] commands = new String[5];
void setup(){
  size(1000,900);
  Balls.add(new Controls(750,100,commands[0] = "Up"));
  Balls.add(new Controls(750,250,commands[1] = "Down"));
  Balls.add(new Controls(650,175,commands[2] = "Left"));
  Balls.add(new Controls(850,175,commands[3] = "Right"));
  Balls.add(new Controls(750,175,commands[4] = "Fire"));
  Qs.add(new Question("Enter Key for Up",550,200));
  Qs.add(new Question("Enter Key for Down",550,300));
  Qs.add(new Question("Enter Key for Left",550,400));
  Qs.add(new Question("Enter Key for Right",550,500));
  Qs.add(new Question("Enter Key for Fire",550,600));
  minimode = -1;
  human = new Player(500,960,100,5,100,5);
  //extra.add(new Health(500,100,10));
  Sidebar = new Rect(width-300,110,250,20);
  mode = -3;
  score = 0;
  countdown = 0;
  initialT = 0;
  waitTime = 5000;
  human = new Player(500,960,100,5,100,5);
  /*for(int i=0;i<5;i++){
    Enemy e = new testCircle(100,50+i*100,3,1.5,100,5,new int[] {1,0,0},i*12);
    //Enemy e2 = new testCircle(200,50+i*100,3,1.5,100,5,new int[] {1,0,0},i*3);
    enemies.add(e);
    //enemies.add(e2);
  }
  */
  partnum=10;
  partition= new boolean[partnum][partnum];
}

void sideBars(){

  Sidebar.display();
  line(Sidebar.x,0,Sidebar.x,height);
  fill(50);
  textFont(createFont("AgencyFB-Reg-48",16));
  text("HealthBar",width-200,100);
  text("Score", width-200,210);
  text(score,width-200,250);
}


void draw(){ //<>//
  background(255);
  if(mode == -3){
    rect(550,200,90,90);
    fill(random(105),random(135),random(75));
    textFont(createFont("Arial Bold", 90));
    text("SPACE PATROL",250,400);
    textFont(createFont("Lucida Sans",32));
    textSize(32);
    text("Press P to Play!",400,500);
    text("Press O for Options!",360,600);
    if(keyPressed){
      if(key == 'P'){mode = 0;}
      else if(key == 'O'){mode = -2;}
      else{text("Please Enter valid Key!",350,700);}
    }
  }
  else if(mode == -2){
    if(minimode == -1){
    textSize(32);
    fill(155);
    text("Default Controls. The Press D",550,200);
    text("Custom Controls. Then Press C",550,300);
    if(keyPressed && key == 'C'){minimode++;}
    else if(keyPressed && key == 'D'){minimode = commands.length;}
    } //<>//
    else if(minimode < commands.length && minimode >= 0){
      text("Click on mouse to confirm selection!",750,100);
      Question q = Qs.get((int)minimode);
      Controls b = Balls.get((int)minimode);
      q.display();
      if(!q.isAnswered()){
        if(keyPressed){
          if(key == CODED){
            String T = CodeKey(keyCode);
            if(T == b.text){q.setAns(b.text);}
            else{q.setAns(T);b.Default = false;}
          }
          else{
            q.setAns(key + "");
            b.Default = false;}
            commands[(int)minimode] = q.ans;
            b.setText(q.ans);
       }
       if(mousePressed && q.ans != ""){q.confirm();}
      }
      else if(q.isAnswered()){minimode++;}
    }
    else if (minimode >= commands.length){
    int counter = 0;
    for(Question q: Qs){
      if(Balls.get(counter).Default){q.setAns(commands[counter]);q.confirm();}
      q.display();
      counter++;
    }
    text("ARE YOU SURE ? : PRESS Y/N",550,750);
    if(keyPressed && key == 'N'){
      background(255);
      for(Question q: Qs){q.clear();}
      minimode = 0;
    }
    else if(keyPressed && key == 'Y'){mode = -3;}
    }
  }
  else if(mode == -1){
    int counter = 0;
  for(Controls b: Balls){
    //b.setText(commands[counter]);
    b.mutate();
    b.display();
   // println(b.text,key);
    counter++;
  } //<>//
  sideBars();
    Letter(10+"");
    text("PRESS P TO PLAY",370,550);
    if(keyPressed && key == 'p'){
      t0=millis();
      prev=t0;
      mode++;
      fci=frameCount;
    }
  }
  else if(mode == 0){
    phasefc++;
    /*if(frameCount-fci==60){
      enemies.add(new testCircle(600,160,3,2,100,5,new int[] {0,10,0}));
    }
    */
    if(phase%2==1&&phase<level1phaseTimes.length*2){
       if(phasefc==level1phaseTimes[phase/2]*60||enemies.size()==0){
         phase++;
         phasefc=0;
       }
    }
    if(phase==0){
     for(int i=0;i<6;i++){
       enemies.add(new testCircle(100+i*100,50,3,1,100,5,new int[] {2},i*20,120));
     }
     phase++;
    }
    if(phase==2){
      for(int i=0;i<3;i++){
        enemies.add(new testCircle((i+1)*700.0/4,50,3,1.5,100,5,new int[] {1}));
      }
      phase++;
    }
    if(phase==4){
        enemies.add(new testCircle(200,50,10,0.5,100,5,new int[] {0,10}));
        phase++;
    }
     for(int i=0;i<partnum;i++){
         for(int j=0;j<partnum;j++){
            if(human.isTouchingRect(width/partnum*i,height/partnum*j,width/partnum,height/partnum)){
              partition[i][j]=true;
            }
            else{
              partition[i][j]=false;
            }
         }
      }
    if(gr){
      for(int i=0;i<partnum;i++){
        line(width/partnum*i,0,width/partnum*i,height);
      }
      for(int i=0;i<partnum;i++){
        line(0,height/partnum*i,width,height/partnum*i);
      }
      for(int i=0;i<partnum;i++){
         for(int j=0;j<partnum;j++){
            if(partition[i][j]){
              fill(0,255,0);
              rect(width/partnum*i,height/partnum*j,width/partnum,height/partnum);
            }
         }
      }
    }

    //background(255);
    time=millis()-t0;
    etime=millis()-prev;
    for(Enemy e:enemies){
        e.attack();
    }
    for(Iterator<Enemy> iter= enemies.iterator(); iter.hasNext();){
       Enemy e = iter.next();
       e.display();
       e.move();
       if(human.isTouching(e)){
      mode=1;
        }
       if(e.x+e.radius < 0 || e.x-e.radius > Sidebar.x || e.y+e.radius < 0 || e.y-e.radius > height){
         iter.remove();
       }
       if(e.health<=0){
             iter.remove();
        }
    }
    for(Iterator<Projectile> iterp = playerproj.iterator(); iterp.hasNext();){
        Projectile p = iterp.next();
        for(Iterator<Enemy> iter= enemies.iterator(); iter.hasNext();){
           Enemy e = iter.next();
           if(p.isTouching(e)){
             e.takeDamage(p.damage);
             iterp.remove();
           }
        }
     }
    human.move();
    human.display();
    human.attack();
    for(Iterator<Projectile> iter = enemyproj.iterator();iter.hasNext();){
      Projectile p = iter.next();
      p.move();
      p.display();
      if(p.isTouching(human)){
        mode=1;
      }
      if(p.isOffScreen()){
       iter.remove();
      }
    }
    for(Iterator<Projectile> iter = playerproj.iterator();iter.hasNext();){
      Projectile p = iter.next();
      p.move();
      p.display();
      if(p.isOffScreen()){
       iter.remove();
      }
    }
    for(Powerups p: extra){
      p.move();
      p.display();
    }
    if(human.x+human.radius > Sidebar.x){
      human.x=Sidebar.x-human.radius;
    }
    if(human.x-human.radius<0){
      human.x=human.radius;
    }
    if(human.y+human.radius>height){
     human.y=height-human.radius;
    }
    if(human.y-human.radius<0){
     human.y=human.radius;
    }
    sideBars();
  }
  else if(mode == 1){
    //background(255);
    text("GAME OVER!",500,200);
    text("PRESS E TO EXIT", 500, 300);
    if(keyPressed && key == 'e'){exit();}
  }
}

public void keyPressed(){
  if(key==CODED){
     if(keyCode==UP){
       mu=true;
     }
     if(keyCode==LEFT){
       ml=true;
     }
     if(keyCode==RIGHT){
       mr=true;
     }
     if(keyCode==DOWN){
       md=true;
     }
     if(keyCode==SHIFT){
       s=true;
     }
  }
  if(key=='z'||key=='Z'){
   f=true;
  }
}

public void keyReleased(){
  if(key==CODED){
     if(keyCode==UP){
       mu=false;
     }
     if(keyCode==LEFT){
       ml=false;
     }
     if(keyCode==RIGHT){
       mr=false;
     }
     if(keyCode==DOWN){
       md=false;
     }
     if(keyCode==SHIFT){
       s=false;
     }
  }
  if(key=='z'||key=='Z'){
   f=false;
  }
}


void mouseClicked(){
  if(mousePressed && !clicked){clicked = true;}
  else{clicked = false;}
}

void Letter(String l){
  fill(255);
  textFont(createFont("AgencyFB-Reg-48",32));
  text(l,500,500);
}

String CodeKey(int Key){
  if(Key == UP){return "Up";}
  else if(Key == LEFT){return "Left";}
  else if(Key == RIGHT){return "Right";}
  else if(Key == DOWN){return "Down";}
  return "";
}
